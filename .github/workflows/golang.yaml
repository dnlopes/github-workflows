on:
  workflow_call:
    inputs:
      golangProjectDir:
        required: false
        type: string
        default: .
        description: path of the Golang project, relative to the root of the repository
      uploadGoArtifacts:
        required: false
        type: boolean
        default: true
        description: whether or not to publish the Golang artifacts (e.g., test results)
      goVersion:
        required: false
        type: string
        default: "1.22"
      failOnLintErrors: # TODO: not working
        required: false
        type: boolean
        default: true
      ignoreErrors:
        required: false
        type: boolean
        default: false
        description: whether or not to ignore errors

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}-golang-checks
  cancel-in-progress: true

env:
  CHECK_NAME: Golang checks

jobs:
  golang:
    name: Build and test
    if: contains('opened reopened synchronize', github.event.action)
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required: allow read access to the content for analysis.
      pull-requests: read # Optional: allow read access to pull request. Use with `only-new-issues` option.
      checks: write # Optional: allow write access to checks to allow the action to annotate code in the PR.
      statuses: write # needed for setting the status of the PR
    defaults:
      run:
        working-directory: ${{ inputs.golangProjectDir }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set status pending
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=pending" -f "description=Golang checks are running" \
            -f "context=${{ env.CHECK_NAME }}"

      - name: Checkout reusable-workflows repository
        uses: actions/checkout@v4
        with:
          repository: dnlopes/github-workflows
          path: actions

      - name: Install tools
        uses: ./actions/.github/actions/install-common-tools
        with:
          goVersion: ${{ inputs.goVersion }}

      - name: Dependencies
        run: go get .

      - name: Build
        run: go build -o main ./...

      - name: Test
        run: go test -json > TestResults-${{ inputs.goVersion }}.json

      - name: Golangci-lint
        uses: golangci/golangci-lint-action@v6
        continue-on-error: true
        with:
          version: latest
          working-directory: ${{ inputs.golangProjectDir }}

      - name: Upload Go test results
        if: ${{ inputs.uploadGoArtifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: Go-results-${{ inputs.goVersion }}
          path: TestResults-${{ inputs.goVersion }}.json
          retention-days: 1
          overwrite: true

      - name: Set status success
        if: ${{ success() || inputs.IgnoreErrors == true }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=success" -f "description=Golang checks were successful" \
            -f "context=${{ env.CHECK_NAME }}"

      - name: Set status failure
        if: ${{ failure() && inputs.IgnoreErrors == false }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=failure" -f "description=Golang checks failed validations!" \
            -f "context=${{ env.CHECK_NAME }}"
