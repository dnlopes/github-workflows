on:
  workflow_call:
    inputs:
      terraformProjectDir:
        required: false
        type: string
        default: .
        description: path of the Terraform project, relative to the root of the repository
      runTerraformAction:
        required: false
        type: boolean
        default: true
        description: whether or not to run Terraform plan/apply/destroy
      awsRoleArn:
        required: false
        description: the IAM role ARN to be assumed when running OpenTofu/Terraform operations
        type: string
        default: ""
      terraformWorkspace:
        required: false
        default: ""
        description: the name of the OpenTofu/Terraform workspace
        type: string
      terraformAction:
        required: false
        default: plan
        description: the type of action to execute in OpenTofu/Terraform (plan/apply/destroy)
        type: string
      terraformVarsFile: # TODO: support empty vars file
        required: true
        description: the location of the tfvars file, related to the 'terraformProjectDir'
        type: string
      addPullRequestComments:
        required: false
        type: boolean
        default: true
      terraformVersion:
        description: Terraform version to install
        type: string
        required: false
        default: "1.9.2"
      openTofuVersion:
        type: string
        description: OpenTofu version to install
        required: false
        default: "1.7.3"
      binary:
        type: string
        description: the binary to use for the OpenTofu/Terraform operations (OpenTofu/Terraform)
        required: false
        default: terraform
      linterLevel:
        type: string
        description: the level of linting to apply to the Terraform code
        required: false
        default: warning
      linterFilterMode:
        type: string
        description: the filter mode to apply to the Terraform linter
        required: false
        default: nofilter
      linterFailOnError:
        type: boolean
        description: whether or not to fail the workflow if the linter fails
        required: false
        default: false

permissions:
  pull-requests: write
  contents: read
  id-token: write # needed for OIDC login in AWS

jobs:
  terraform:
    name: Run (${{ inputs.terraformAction }})
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terraformProjectDir }}
    env:
      TF_IN_AUTOMATION: true
      TF_INPUT: false
      TF_CLI_ARGS: -no-color
      TF_CLI_ARGS_plan: -lock=false -var-file=${{ inputs.terraformVarsFile }}
      TF_CLI_ARGS_apply: -var-file=${{ inputs.terraformVarsFile }} -auto-approve
      TOFU_WORKSPACE: ${{ inputs.terraformWorkspace }}
      TF_WORKSPACE: ${{ inputs.terraformWorkspace }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Checkout reusable-workflows repository
      uses: actions/checkout@v4
      with:
        repository: dnlopes/github-workflows
        path: actions

    - name: Install tools
      uses: ./actions/.github/actions/install-common-tools
      with:
        terraformVersion: ${{ inputs.terraformVersion }}
        openTofuVersion: ${{ inputs.openTofuVersion }}

    # first init without backend, so we can run validation on it without needing credentials
    - name: Init (backend=false)
      id: init_backend_false
      run: ${{ inputs.binary }} init -backend=false

    - name: Format
      id: fmt
      continue-on-error: true
      run: ${{ inputs.binary }} fmt -recursive -diff -check

    - name: Validate
      id: validate
      run: ${{ inputs.binary }} validate

    - name: Lint
      uses: reviewdog/action-tflint@v1
      with:
        github_token: ${{ secrets.github_token }}
        level: ${{ inputs.linterLevel }}
        reporter: github-pr-review
        filter_mode: ${{ inputs.linterFilterMode }}
        fail_on_error: ${{ inputs.linterFailOnError }}
        working_directory: ${{ inputs.terraformProjectDir }}

    - name: Configure AWS Credentials
      if: ${{ inputs.runTerraformAction }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.awsRoleArn }}
        aws-region: eu-west-1
        role-session-name: ${{ inputs.terraformWorkspace }}

    # now init with backend, to prepare the plan step
    - name: Terraform init (backend=true)
      if: ${{ inputs.runTerraformAction }}
      id: init_backend_true
      run: |
        ${{ inputs.binary }} init

    - name: Terraform ${{ inputs.terraformAction }}
      if: ${{ inputs.runTerraformAction }}
      id: plan_or_apply
      run: ${{ inputs.binary }} ${{ inputs.terraformAction }}

    - name: Comment PR (fmt)
      uses: GetTerminus/terraform-pr-commenter@v3
      if: always() && github.event_name == 'pull_request' && inputs.addPullRequestComments && (steps.fmt.outcome == 'success' || steps.fmt.outcome == 'failure')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_WORKSPACE: ${{ inputs.terraformWorkspace }}
        EXPAND_SUMMARY_DETAILS: false
      with:
        commenter_type: fmt
        commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
        commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}

    - name: Comment PR (validate)
      uses: GetTerminus/terraform-pr-commenter@v3
      if: always() && github.event_name == 'pull_request' && inputs.addPullRequestComments && (steps.validate.outcome == 'success' || steps.validate.outcome == 'failure')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_WORKSPACE: ${{ inputs.terraformWorkspace }}
        EXPAND_SUMMARY_DETAILS: false
      with:
        commenter_type: validate
        commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
        commenter_exitcode: ${{ steps.validate.outputs.exitcode }}

    - name: Comment PR (init)
      uses: GetTerminus/terraform-pr-commenter@v3
      if: always() && github.event_name == 'pull_request' && inputs.addPullRequestComments && (steps.init_backend_true.outcome == 'success' || steps.init_backend_true.outcome == 'failure')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_WORKSPACE: ${{ inputs.terraformWorkspace }}
        EXPAND_SUMMARY_DETAILS: false
      with:
        commenter_type: init
        commenter_input: ${{ format('{0}{1}', steps.init_backend_true.outputs.stdout, steps.init_backend_true.outputs.stderr) }}
        commenter_exitcode: ${{ steps.init_backend_true.outputs.exitcode }}

    - name: Comment PR (plan)
      uses: GetTerminus/terraform-pr-commenter@v3
      if: always() && github.event_name == 'pull_request' && inputs.addPullRequestComments && (steps.plan_or_apply.outcome == 'success' || steps.plan_or_apply.outcome == 'failure')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_WORKSPACE: ${{ inputs.terraformWorkspace }}
        EXPAND_SUMMARY_DETAILS: false
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.plan_or_apply.outputs.stdout, steps.plan_or_apply.outputs.stderr) }}
        commenter_exitcode: ${{ steps.plan_or_apply.outputs.exitcode }}
