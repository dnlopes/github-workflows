on:
  workflow_call:
    inputs:
      terraformProjectDir:
        required: false
        type: string
        default: .
        description: path of the Terraform project, relative to the root of the repository
      runPlanOrApply:
        required: false
        type: boolean
        default: true
        description: whether or not to run Terraform plan/apply/destroy
      awsRoleArn:
        required: false
        description: the IAM role ARN to be assumed when running OpenTofu/Terraform operations
        type: string
        default: ""
      terraformWorkspace:
        required: false
        default: ""
        description: the name of the OpenTofu/Terraform workspace
        type: string
      terraformAction:
        required: false
        default: plan
        description: the type of action to execute in OpenTofu/Terraform (plan/apply/destroy)
        type: string
      terraformVarsFile: # TODO: support empty vars file
        required: true
        description: the location of the tfvars file, related to the 'terraformProjectDir'
        type: string
      addPullRequestComments:
        required: false
        type: boolean
        default: true
      terraformVersion:
        description: Terraform version to install
        type: string
        required: false
        default: "1.9.2"
      openTofuVersion:
        type: string
        description: OpenTofu version to install
        required: false
        default: "1.7.3"
      binary:
        type: string
        description: the binary to use for the OpenTofu/Terraform operations (OpenTofu/Terraform)
        required: false
        default: terraform
      ignoreErrors:
        required: false
        type: boolean
        default: false
        description: whether or not to ignore errors

jobs:
  terraform:
    name: Run (${{ inputs.terraformAction }})
    if: contains('opened reopened synchronize', github.event.action)
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      id-token: write # needed for OIDC login in AWS
      statuses: write # needed for setting the status of the PR
    defaults:
      run:
        working-directory: ${{ inputs.terraformProjectDir }}
    env:
      TF_IN_AUTOMATION: true
      TF_INPUT: false
      TF_CLI_ARGS: -no-color
      TF_CLI_ARGS_plan: -lock=false -var-file=${{ inputs.terraformVarsFile }}
      TF_CLI_ARGS_apply: -var-file=${{ inputs.terraformVarsFile }} -auto-approve
      TOFU_WORKSPACE: ${{ inputs.terraformWorkspace }}
      TF_WORKSPACE: ${{ inputs.terraformWorkspace }}
      CHECK_NAME: Terraform checks
    concurrency:
      group: terraform-${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}-${{ inputs.terraformWorkspace }}
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set pending status
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=pending" -f "description=validations running" \
            -f "context=${{ env.CHECK_NAME }}"

      - name: Checkout reusable-workflows repository
        uses: actions/checkout@v4
        with:
          repository: dnlopes/github-workflows
          path: actions

      - name: Install tools
        uses: ./actions/.github/actions/install-common-tools
        with:
          terraformVersion: ${{ inputs.terraformVersion }}
          openTofuVersion: ${{ inputs.openTofuVersion }}

      - name: Format
        id: fmt
        run: ${{ inputs.binary }} fmt -recursive -diff -check

      - name: Configure AWS Credentials
        if: ${{ inputs.runPlanOrApply }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.awsRoleArn }}
          aws-region: eu-west-1
          role-session-name: ${{ inputs.terraformWorkspace }}

      - name: Init
        id: init
        run: |
          if [ ${{ inputs.runPlanOrApply }} == true ]; then
            ${{ inputs.binary }} init -upgrade | tee ${GITHUB_WORKSPACE}/init.out
          else
            ${{ inputs.binary }} init -backend=false | tee ${GITHUB_WORKSPACE}/init.out
          fi

      - name: Validate
        id: validate
        run: ${{ inputs.binary }} validate

      - name: .terraform.lock.hcl updated?
        id: verify_lockfile
        run: git --no-pager diff --exit-code .terraform.lock.hcl

      - name: ${{ inputs.terraformAction }}
        if: ${{ inputs.runPlanOrApply }}
        id: plan_or_apply
        run: ${{ inputs.binary }} ${{ inputs.terraformAction }}

      - name: Comment PR (fmt)
        uses: GetTerminus/terraform-pr-commenter@v3
        if: always() && github.event_name == 'pull_request' && inputs.addPullRequestComments && (steps.fmt.outcome == 'success' || steps.fmt.outcome == 'failure')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_WORKSPACE: ${{ inputs.terraformWorkspace }}
          EXPAND_SUMMARY_DETAILS: false
        with:
          commenter_type: fmt
          commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
          commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}

      - name: Comment PR (init)
        uses: GetTerminus/terraform-pr-commenter@v3
        if: always() && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && inputs.addPullRequestComments && (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_WORKSPACE: ${{ inputs.terraformWorkspace }}
          EXPAND_SUMMARY_DETAILS: false
        with:
          commenter_type: init
          commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
          commenter_exitcode: ${{ steps.init.outputs.exitcode }}

      - name: Comment PR (validate)
        uses: GetTerminus/terraform-pr-commenter@v3
        if: always() && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && inputs.addPullRequestComments && (steps.validate.outcome == 'success' || steps.validate.outcome == 'failure')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_WORKSPACE: ${{ inputs.terraformWorkspace }}
          EXPAND_SUMMARY_DETAILS: false
        with:
          commenter_type: validate
          commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
          commenter_exitcode: ${{ steps.validate.outputs.exitcode }}

      - name: Comment PR (outdated lockfile)
        if: always() && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && inputs.addPullRequestComments && steps.verify_lockfile.outcome == 'failure'
        uses: thollander/actions-comment-pull-request@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          mode: recreate
          comment_tag: lockfile-up-to-date
          create_if_not_exists: true
          message: |
            > [!CAUTION]  
            > terraform.lockfile.hcl is not up to date!

      - name: Comment PR (plan)
        uses: GetTerminus/terraform-pr-commenter@v3
        if: always() && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && inputs.addPullRequestComments && (steps.plan_or_apply.outcome == 'success' || steps.plan_or_apply.outcome == 'failure')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_WORKSPACE: ${{ inputs.terraformWorkspace }}
          EXPAND_SUMMARY_DETAILS: false
        with:
          commenter_type: plan
          commenter_input: ${{ format('{0}{1}', steps.plan_or_apply.outputs.stdout, steps.plan_or_apply.outputs.stderr) }}
          commenter_exitcode: ${{ steps.plan_or_apply.outputs.exitcode }}

      - name: Set status success
        if: ${{ (success() || inputs.IgnoreErrors == true) && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=success" -f "description=validations successful" \
            -f "context=${{ env.CHECK_NAME }}"

      - name: Set status failure
        if: ${{ (failure() && inputs.IgnoreErrors == false) && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=failure" -f "description=validations failed" \
            -f "context=${{ env.CHECK_NAME }}"

  terraform-scan:
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
    name: Snyk
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
      statuses: write # needed for setting the status of the PR
      actions: read
      security-events: write
    concurrency:
      group: terraform-${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}-${{ inputs.terraformWorkspace }}-security-scan
      cancel-in-progress: true
    defaults:
      run:
        working-directory: ${{ inputs.terraformProjectDir }}
    env:
      CHECK_NAME: Snyk scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set pending status
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=pending" -f "description=validations running" \
            -f "context=${{ env.CHECK_NAME }}"

      - name: Set status success
        if: ${{ (success() || inputs.IgnoreErrors == true) && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=success" -f "description=validations successful" \
            -f "context=${{ env.CHECK_NAME }}"

      - name: Set status failure
        if: ${{ (failure() && inputs.IgnoreErrors == false) && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=failure" -f "description=validations failed" \
            -f "context=${{ env.CHECK_NAME }}"
